<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wanghuiwen.user.dao.UserInfoMapper">
  <resultMap id="BaseResultMap" type="com.wanghuiwen.user.model.UserInfo">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="group_id" jdbcType="INTEGER" property="groupId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="concat_number" jdbcType="VARCHAR" property="concatNumber" />
    <result column="picture" jdbcType="VARCHAR" property="picture" />
    <result column="industry" jdbcType="VARCHAR" property="industry" />
    <result column="country" jdbcType="INTEGER" property="country" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="birthday" jdbcType="BIGINT" property="birthday" />
    <result column="occupation" jdbcType="VARCHAR" property="occupation" />
    <result column="introduction" jdbcType="VARCHAR" property="introduction" />
    <result column="whatsapp" jdbcType="VARCHAR" property="whatsapp" />
    <result column="facebook" jdbcType="VARCHAR" property="facebook" />
    <result column="linkedin" jdbcType="VARCHAR" property="linkedin" />
    <result column="youtube" jdbcType="VARCHAR" property="youtube" />
    <result column="instagram" jdbcType="VARCHAR" property="instagram" />
    <result column="grade_id" jdbcType="INTEGER" property="gradeId" />
    <result column="member" jdbcType="VARCHAR" property="member" />
    <result column="position_id" jdbcType="INTEGER" property="positionId" />
    <result column="email" jdbcType="VARCHAR" property="email" />
  </resultMap>


    <resultMap id="vo" type="com.wanghuiwen.user.vo.UserInfoVo">
        <id column="user_id" jdbcType="BIGINT" property="userId" />
        <result column="group_id" jdbcType="INTEGER" property="groupId" />
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="concat_number" jdbcType="VARCHAR" property="concatNumber" />
        <result column="picture" jdbcType="VARCHAR" property="picture" />
        <result column="industry" jdbcType="VARCHAR" property="industry" />
        <result column="country" jdbcType="INTEGER" property="country" />
        <result column="state" jdbcType="INTEGER" property="state" />
        <result column="birthday" jdbcType="BIGINT" property="birthday" />
        <result column="occupation" jdbcType="VARCHAR" property="occupation" />
        <result column="introduction" jdbcType="VARCHAR" property="introduction" />
        <result column="whatsapp" jdbcType="VARCHAR" property="whatsapp" />
        <result column="facebook" jdbcType="VARCHAR" property="facebook" />
        <result column="linkedin" jdbcType="VARCHAR" property="linkedin" />
        <result column="youtube" jdbcType="VARCHAR" property="youtube" />
        <result column="instagram" jdbcType="VARCHAR" property="instagram" />
        <result column="grade_id" jdbcType="INTEGER" property="gradeId" />
        <result column="grade_name" jdbcType="VARCHAR" property="gradeName" />
        <result column="group_name" jdbcType="VARCHAR" property="groupName" />
        <result column="position_name" jdbcType="VARCHAR" property="positionName" />
        <result column="position_id" jdbcType="INTEGER" property="positionId" />
        <result column="enable" jdbcType="BIT" property="enable" />
        <result column="isFriend" jdbcType="BIT" property="friend" />
        <collection column="user_id" javaType="ArrayList" property="companyVos" select="com.wanghuiwen.user.dao.UserCompanyMapper.selectByUser" />
    </resultMap>

    <resultMap id="network" type="com.wanghuiwen.user.vo.UserNetWorkVo">
        <id column="user_id" jdbcType="BIGINT" property="userId" />
        <result column="group_id" jdbcType="INTEGER" property="groupId" />
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="concat_number" jdbcType="VARCHAR" property="concatNumber" />
        <result column="picture" jdbcType="VARCHAR" property="picture" />
        <result column="industry" jdbcType="VARCHAR" property="industry" />
        <result column="country" jdbcType="INTEGER" property="country" />
        <result column="state" jdbcType="INTEGER" property="state" />
        <result column="birthday" jdbcType="BIGINT" property="birthday" />
        <result column="occupation" jdbcType="VARCHAR" property="occupation" />
        <result column="introduction" jdbcType="VARCHAR" property="introduction" />
        <result column="whatsapp" jdbcType="VARCHAR" property="whatsapp" />
        <result column="facebook" jdbcType="VARCHAR" property="facebook" />
        <result column="linkedin" jdbcType="VARCHAR" property="linkedin" />
        <result column="youtube" jdbcType="VARCHAR" property="youtube" />
        <result column="instagram" jdbcType="VARCHAR" property="instagram" />
        <result column="grade_id" jdbcType="INTEGER" property="gradeId" />
        <result column="enable" jdbcType="INTEGER" property="enable" />
        <result column="isFriend" jdbcType="INTEGER" property="isFriend" />
        <result column="grade_name" jdbcType="VARCHAR" property="gradeName" />
        <result column="group_name" jdbcType="VARCHAR" property="groupName" />
    </resultMap>


    <select id="managerList" resultMap="vo">
        SELECT ui.*,
        u.`enable`,
        mg.group_name,
        grade.grade_name,
        po.position_name,
        ar.attendance_rate as attendance,
        rgs.send_count as referralSend,
        rgr.received_count as referralReceived,
        tgs.thank_send_count as thankYouNote,
        tgs.thank_send_count_sum as thankYouNoteSum,
        tgr.thank_received_count  as thankReceivedCount,
        ac.`name` as countryName,
        ast.`name` as stateName
        FROM (select * from user_info where 1=1
        <if test="params.name!=null and params.name!=''">
            and (name like concat('%',#{params.name},'%') or concat_number like concat('%',#{params.name},'%'))
        </if>
        <if test="params.groupId!=null">
            and group_id = #{params.groupId}
        </if>
        <if test="params.gradeId!=null">
            and grade_id = #{params.gradeId}
        </if>
        <if test="params.positionId!=null">
            and position_id = #{params.positionId}
        </if>
        ) ui
        LEFT JOIN `user` u ON (ui.user_id = u.id)
        LEFT JOIN grade ON (grade.grade_id = ui.grade_id)
        LEFT JOIN mmc_group mg ON (mg.group_id = ui.group_id)
        LEFT JOIN attendance_rate ar on (ar.user_id = ui.user_id)
        LEFT JOIN referral_group_send rgs on (rgs.send_user = ui.user_id)
        LEFT JOIN referral_group_received rgr on (rgr.received_user = ui.user_id)
        LEFT JOIN thank_group_send tgs on (tgs.send_user = ui.user_id)
        LEFT JOIN thank_group_received tgr on (tgr.received_user = ui.user_id)
        left join position po on (po.position_id  = ui.position_id)
        LEFT JOIN address_countries ac on(ac.id = ui.country)
        LEFT JOIN address_states ast on (ast.id= ui.state)
        order by u.id desc
    </select>

    <select id="network" resultMap="network">
        SELECT ui.*,
        u.`enable`,
        ar.attendance_rate as attendance,
        rgs.send_count as referralSend,
        rgr.received_count as referralReceived,
        tgs.thank_send_count as thankYouNote,
        tgr.thank_received_count,
        uf.follow_id is not null as isFriend,
        mg.group_name,
        grade.grade_name
        FROM (select * from user_info where  name is not null and concat_number is not null
        <if test="params.name!=null and params.name!=''">
            and name like concat('%',#{params.name},'%')
        </if>
        <if test="params.Industry!=null and params.Industry!=''">
            and industry = #{params.Industry}
        </if>
        <if test="params.countryId!=null">
            and country = #{params.countryId}
        </if>
        <if test="params.cityId!=null">
            and state = #{params.cityId}
        </if>
        <if test="params.groupId!=null">
            and group_id = #{params.groupId}
        </if>
        <if test="params.userGrade == 1 or params.userGrade == 2 or params.userGrade == 3">
            and grade_id in(4,5)
        </if>
        <if test="params.onlySelf!=null">
            and exists(select * from user_follow uf2 where (uf2.follow_user_id = #{params.userId} and uf2.user_id = user_info.user_id))
        </if>
        ) ui
        LEFT JOIN `user` u ON (ui.user_id = u.id)
        LEFT JOIN grade ON (grade.grade_id = ui.grade_id)
        LEFT JOIN mmc_group mg ON (mg.group_id = ui.group_id)
        LEFT JOIN attendance_rate ar on (ar.user_id = ui.user_id)
        LEFT JOIN referral_group_send rgs on (rgs.send_user = ui.user_id)
        LEFT JOIN referral_group_received rgr on (rgr.received_user = ui.user_id)
        LEFT JOIN thank_group_send tgs on (tgs.send_user = ui.user_id)
        LEFT JOIN thank_group_received tgr on (tgr.received_user = ui.user_id)
        LEFT JOIN user_follow uf on (uf.follow_user_id = #{params.userId} and uf.user_id = ui.user_id)
        where u.enable != 0
        order by rand()
    </select>

    <select id="detail" resultMap="vo">
        SELECT ui.*,
               u.`enable`,
               grade_name,
               group_name,
               ar.attendance_rate         as attendance,
               rgs.send_count             as referralSend,
               rgr.received_count         as referralReceived,
               tgs.thank_send_count       as thankYouNote,
               tgr.thank_received_count,
               uf.follow_id is not null as isFriend
        FROM (select * from user_info where user_id = #{userId}) ui
                     LEFT JOIN `user` u ON (ui.user_id = u.id)
                     LEFT JOIN grade ON (grade.grade_id = ui.grade_id)
                     LEFT JOIN mmc_group mg ON (mg.group_id = ui.group_id)
                     LEFT JOIN attendance_rate ar on (ar.user_id = ui.user_id)
                     LEFT JOIN referral_group_send rgs on (rgs.send_user = ui.user_id)
                     LEFT JOIN referral_group_received rgr on (rgr.received_user = ui.user_id)
                     LEFT JOIN thank_group_send tgs on (tgs.send_user = ui.user_id)
                     LEFT JOIN thank_group_received tgr on (tgr.received_user = ui.user_id)
                     LEFT JOIN user_follow uf on (uf.follow_user_id = #{id} and uf.user_id = ui.user_id)
    </select>

  <select id="detailUser" resultMap="vo">
      SELECT ui.*,
             u.`enable`,
             ar.attendance_rate         as attendance,
             rgs.send_count             as referralSend,
             rgr.received_count         as referralReceived,
             tgs.thank_send_count       as thankYouNote,
             tgs.thank_send_count_sum  as thankYouNoteSum,
             tgr.thank_received_count  as thankReceivedCount
      FROM (select * from user_info where user_id = #{userId}) ui
                   LEFT JOIN `user` u ON (ui.user_id = u.id)
                   LEFT JOIN grade ON (grade.grade_id = ui.grade_id)
                   LEFT JOIN mmc_group mg ON (mg.group_id = ui.group_id)
                   LEFT JOIN attendance_rate ar on (ar.user_id = ui.user_id)
                   LEFT JOIN referral_group_send rgs on (rgs.send_user = ui.user_id)
                   LEFT JOIN referral_group_received rgr on (rgr.received_user = ui.user_id)
                   LEFT JOIN thank_group_send tgs on (tgs.send_user = ui.user_id)
                   LEFT JOIN thank_group_received tgr on (tgr.received_user = ui.user_id)
    </select>

  <select id="achievements" resultType="com.wanghuiwen.user.vo.Achievement">
      SELECT
      ui.id,
      rgs.send_count             as referralSend,
      rgr.received_count         as referralReceived,
      tgs.thank_send_count       as thankYouNoteSend,
      tgr.thank_received_count   as thankYouNoteReceived,
      prgs.send_count             as prevReferralSend,
      prgr.received_count         as prevReferralReceived,
      ptgs.thank_send_count       as prevThankYouNoteSend,
      ptgr.thank_received_count   as prevThankYouNoteReceived,
      rgsc.send_count             as referralSendCount,
      rgrc.received_count         as referralReceivedCount,
      tgsc.thank_send_count       as thankYouNoteCount,
      tgrc.thank_received_count  as thankYouNoteReceivedCount,
      je.joinEvent,
      jec.joinEventCount,
      jep.joinEventPre

      FROM (select * from user where id = #{id}) ui
      LEFT JOIN referral_send_month_group rgs on (rgs.send_user = ui.id and rgs.`month` = MONTH(NOW()) and rgs.`year` = YEAR(NOW()))
      LEFT JOIN referral_received_month_group rgr on (rgr.received_user = ui.id and rgr.`month` =  MONTH(NOW()) and rgr.`year` =YEAR(NOW()) )
      LEFT JOIN thank_send_group_month tgs on (tgs.send_user = ui.id and tgs.`month` =  MONTH(NOW())  and tgs.`year`=YEAR(NOW())  )
      LEFT JOIN thank_received_group_month tgr on (tgr.received_user = ui.id and tgr.`month` = MONTH(NOW())  and tgr.`year` = YEAR	(NOW()))
      LEFT JOIN referral_send_month_group prgs on (prgs.send_user = ui.id and prgs.`month` = MONTH(date_sub(now(),interval 1 month)) and prgs.`year` = YEAR(date_sub(now(),interval 1 month)))
      LEFT JOIN referral_received_month_group prgr on (prgr.received_user = ui.id and prgr.`month` =  MONTH(date_sub(now(),interval 1 month)) and prgr.`year` =YEAR(date_sub(now(),interval 1 month)) )
      LEFT JOIN thank_send_group_month ptgs on (ptgs.send_user = ui.id and ptgs.`month` =  MONTH(date_sub(now(),interval 1 month))  and ptgs.`year`=YEAR(date_sub(now(),interval 1 month))  )
      LEFT JOIN thank_received_group_month ptgr on (ptgr.received_user = ui.id and ptgr.`month` = MONTH(date_sub(now(),interval 1 month))  and ptgr.`year` = YEAR(date_sub(now(),interval 1 month)))

      LEFT JOIN referral_group_send rgsc on (rgsc.send_user = ui.id)
      LEFT JOIN referral_group_received rgrc on (rgrc.received_user = ui.id)
      LEFT JOIN thank_group_send tgsc on (tgsc.send_user = ui.id)
      LEFT JOIN thank_group_received tgrc on (tgrc.received_user = ui.id)
      LEFT JOIN (SELECT count(*) as joinEventCount,user_id from attendance where user_id = #{id}) jec on(jec.user_id = ui.id)
      LEFT JOIN (SELECT count(*) as joinEvent,user_id from attendance where user_id = #{id} and month(FROM_UNIXTIME(join_time/1000)) = MONTH(NOW()) and year(FROM_UNIXTIME(join_time/1000)) = YEAR(NOW())) je on(je.user_id = ui.id)
      LEFT JOIN (SELECT count(*) as joinEventPre,user_id from attendance where user_id = #{id} and month(FROM_UNIXTIME(join_time/1000)) = MONTH(date_sub(now(),interval 1 month)) and year(FROM_UNIXTIME(join_time/1000)) = YEAR(date_sub(now(),interval 1 month))) jep on(jep.user_id = ui.id)


  </select>

  <select id="findByGroupAndGrade" resultMap="com.wanghuiwen.base.dao.UserMapper.BaseResultMap">
      select * from user_info
      left join user u on (user_info.user_id = u.id)
      where 1=1
      <if test="groups!=null and groups.size > 0">
          and group_id in
          <foreach  item="item" collection="groups" index="index"  open="(" separator="," close=")">
              #{item.groupId}
          </foreach>
      </if>
      <if test="grades!=null and grades.size > 0">
          and grade_id in
          <foreach  item="item" collection="grades" index="index"  open="(" separator="," close=")">
              #{item.gradeId}
          </foreach>
      </if>
    </select>

  <select id="groupByGrade" resultType="com.wanghuiwen.common.mybatis.ResultMap">
      SELECT grade.grade_id,IFNULL(g.total,0) as total,grade.grade_name from grade
      LEFT JOIN (select  grade_id,count(*) as total from user_info GROUP BY grade_id) g on(g.grade_id = grade.grade_id)
      WHERE grade.grade_id > 0
    </select>

  <select id="mapData" resultType="com.wanghuiwen.common.mybatis.ResultMap">
      SELECT ast.latitude,ast.longitude ,ast.`name`, count(*) as total from user_info ui
       LEFT JOIN address_countries  ac on(ui.country = ac.id)
       LEFT JOIN address_states ast on (ui.state = ast.id)
      WHERE ui.state is not null and ast.id is not null
      GROUP BY ast.name
    </select>

    <select id="mapLine" resultType="com.wanghuiwen.user.vo.MapLineVo">
        SELECT
                astf.latitude AS formLat,
                astf.longitude AS formLog,
                astt.latitude AS toLat,
                astt.longitude AS toLog,
                CONCAT( state.sendUser, '-', state.receivedUser ) AS NAME
        FROM
                (
                        SELECT
                                a.*,
                                uis.state AS fromState,
                                uir.state AS toState,
                                uis.`name` AS sendUser,
                                uir.`name` AS receivedUser
                        FROM
                                ( SELECT * from (SELECT received_user, send_user FROM referral UNION ALL SELECT received_user, send_user FROM thank_you_note) temp GROUP BY received_user ,send_user ) a
                                        LEFT JOIN user_info uir ON ( uir.user_id = a.received_user )
                                        LEFT JOIN user_info uis ON ( uis.user_id = a.send_user )
                        WHERE
                                uir.state IS NOT NULL
                          AND uis.state IS NOT NULL
                        ) state
                        LEFT JOIN address_states astf ON ( state.fromState = astf.id )
                        LEFT JOIN address_states astt ON (state.toState = astt.id)

    </select>
</mapper>